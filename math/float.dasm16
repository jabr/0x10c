bra main

:count dat 0x0000, 0x0000

:d_3   dat 0x6000, 0x0002
:d_5   dat 0x5000, 0x0003
:d_0.6 dat 0x4ccc, 0x0000
:d_8   dat 0x4000, 0x0004
:d_n2  dat 0xe000, 0x0003

dat p"xx"
:out dat 0,0, 0,0, 0,0, 0,0
dat p"xx"

:main
    set I, out
    set A, [d_3+0]
    set X, [d_3+1]
    set B, [d_5+0]
    set Y, [d_5+1]
    jsr div
    sti [I], C
    sti [I], Z
    jsr add
    sti [I], C
    sti [I], Z
    jsr sub
    sti [I], C
    sti [I], Z
    brk

:benchmark
    set A, [d_3+0]
    set X, [d_3+1]
    set B, [d_5+0]
    set Y, [d_5+1]
    jsr add
    jsr sub
    jsr div
    add [count], 1
    adx [count+1], 0
    ife EX, 0
        bra benchmark
    brk

:add
    ; AX + BY -> CZ
    set push, I
    set push, J

; todo: overflow on signed add/sub

    ifu X, Y
        bra add_bigger_b

    set Z, X

    set I, X
    sub I, Y

    set C, B
    asr C, I
    add C, A

    bra add_end

:add_bigger_b
    set Z, Y

    set I, Y
    sub I, X

    set C, A
    asr C, I
    add C, B

:add_end
    set J, pop
    set I, pop
    ret

:sub
    ; AX - BY -> CZ
    set push, B
    mli B, -1
    jsr add
    set B, pop
    ret

:div
    ; AX / BY -> CZ
    ife B, 0
        bra return_nan

    set push, I

    set Z, X
    sub Z, Y

    set I, A
    dvi I, B
    set C, EX
    asr C, 1

    ife I, 0
        bra div_end

    add Z, 1
    asr C, 1
    bor C, 0x4000

:div_end
    set I, POP
    ret

:return_nan
    set C, 0
    set Z, 0x7fff
    ret

:sqrt
    ; sqrt(AX) -> CZ
    ; using Newton's Iteration:
    ; k = (k + n/k) / 2
    ret
