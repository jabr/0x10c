jmp main

:count dat 0x0000

:pi      dat 0x6488, 0x0002
:half_pi dat 0x6488, 0x0001
:sqrt_2  dat 0x5a82, 0x0001

:d_2   dat 0x7fff, 0x0001
:d_3   dat 0x6000, 0x0002
:d_5   dat 0x5000, 0x0003
:d_8   dat 0x4000, 0x0004
:d_n2  dat 0xe000, 0x0003
:d_15  dat 0x7800, 0x0004
:d_0.6 dat 0x4ccc, 0x0000

dat p"xx"
:out dat 0,0, 0,0, 0,0, 0,0
     dat 0,0
dat p"xx"

:main
    set I, out

    set A, [d_3+0]
    set X, [d_3+1]
    set B, [d_3+0]
    set Y, [d_3+1]

    jsr add
    sti [I], C
    sti [I], Z

    jsr sub
    sti [I], C
    sti [I], Z

    jsr mul
    sti [I], C
    sti [I], Z

    jsr div
    sti [I], C
    sti [I], Z

    set A, [d_2+0]
    set X, [d_2+1]

    jsr sqrt
    sti [I], C
    sti [I], Z

    brk

:benchmark
    jsr add
    jsr sub
    jsr mul
    jsr div
    add [count], 1
    ife EX, 0
        bra benchmark
    brk

; arithmetic

; todo: seems to be a bug with mixed sign div -- div 3, -2 = 0.5

; todo: change exponents to be unsigned with basis

; todo: signed mantissa is proving to be a pain.
;       maybe make it unsigned and move sign bit to exponent word.

; todo: detect exponent overflow and return +/- infinity
; todo: test for and propagate NaN and infinities

:normalize
    ife Z, 0x8000
        bra return_zero

    shl C, 1
    shl J, 1 ; pull a bit from our truncated result
    bor C, EX
    sub Z, 1

:normalize_loop
    ifc C, 0x4000
        bra normalize

    ifn I, 0 ; negate if it was a negative number
        mli C, 0xffff

:normalize_done
    set J, pop
    set I, pop
    ret

:normalize_test
    ife C, 0
        bra return_zero
    set I, 0
    ifa C, 0
        bra normalize_loop
    ife C, 0x8000
        bra normalize_done

    mli C, 0xffff ; flip negative to positive for normalization
    set I, 1 ; set flag so we know to flip back
    bra normalize_loop

:return_zero
    set C, 0
    set Z, 0
    set J, pop
    set I, pop
    ret

:add ; AX + BY -> CZ
    set push, I
    set push, J

    ifu X, Y
        bra add_bigger_b

    set Z, X

    set I, X
    sub I, Y

    set C, B
    asr C, I
    set J, EX ; keep truncated bits in case shift we shift left during normalization
    add C, A

    bra add_check_sign

:add_bigger_b
    set Z, Y

    set I, Y
    sub I, X

    set C, A
    asr C, I
    set J, EX ; keep truncated bits in case shift we shift left during normalization
    add C, B

:add_check_sign
    ifc B, 0x8000 ; if B is positive and C < A
    ifu C, A
        bra add_fix_sign_overflow
    ifb B, 0x8000 ; if B is negative and C > A
    ifa C, A
        bra add_fix_sign_underflow

    ; relative jump to normalize_test
    sub PC, 2 + . - normalize_test

:add_fix_sign_overflow
    shr C, 1
    add Z, 1
    ; relative jump to normalize_test
    sub PC, 2 + . - normalize_test

:add_fix_sign_underflow
    shr C, 1
    bor C, 0x8000
    add Z, 1
    ; relative jump to normalize_test
    sub PC, 2 + . - normalize_test

:sub ; AX - BY -> CZ
    set push, B
    ; handle case where B is -32768, as mli -32768, -1 == -32768
    ife B, 0x8000
        add B, 1
    mli B, -1
    jsr add
    set B, pop
    ret

:mul ; AX * BY -> CZ
    set push, I
    set push, J

    set Z, X
    add Z, Y

    set C, A
    mli C, B
    set I, EX
    shl I, 1
    shr C, 15
    set J, EX ; save these bits in case we shift left during normalization
    bor C, I

    ; relative jump to normalize_test
    sub PC, 2 + . - normalize_test

:div ; AX / BY -> CZ
    ife B, 0
        bra return_nan

    set push, I
    set push, J

    set Z, X
    sub Z, Y

    set I, A
    dvi I, B
    set C, EX
    asr C, 1
    set J, EX ; keep this bit in case we shift left during normalization

    ife I, 0
        ; relative jump to normalize_test
        sub PC, 2 + . - normalize_test

    add Z, 1
    asr C, 1
    bor C, 0x4000

    ; relative jump to normalize_test
    sub PC, 2 + . - normalize_test

:return_nan
    set C, 0
    set Z, 0x7fff
    ; branched to before I/J pushed, so no need to pop
    ret

; library

:sqrt
    ; sqrt(AX) -> CZ
    ; using Newton's Iteration:
    ; k = (k + n/k) / 2
    ret
